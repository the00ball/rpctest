/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CalcController_H
#define CalcController_H

#include <boost/smart_ptr/shared_ptr.hpp>
#include <stddef.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/TDispatchProcessor.h>
#include <thrift/TProcessor.h>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

namespace rpctest { namespace thrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalcControllerIf {
 public:
  virtual ~CalcControllerIf() {}
  virtual int32_t Sum(const int32_t a, const int32_t b) = 0;
};

class CalcControllerIfFactory {
 public:
  typedef CalcControllerIf Handler;

  virtual ~CalcControllerIfFactory() {}

  virtual CalcControllerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalcControllerIf* /* handler */) = 0;
};

class CalcControllerIfSingletonFactory : virtual public CalcControllerIfFactory {
 public:
  CalcControllerIfSingletonFactory(const boost::shared_ptr<CalcControllerIf>& iface) : iface_(iface) {}
  virtual ~CalcControllerIfSingletonFactory() {}

  virtual CalcControllerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalcControllerIf* /* handler */) {}

 protected:
  boost::shared_ptr<CalcControllerIf> iface_;
};

class CalcControllerNull : virtual public CalcControllerIf {
 public:
  virtual ~CalcControllerNull() {}
  int32_t Sum(const int32_t /* a */, const int32_t /* b */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _CalcController_Sum_args__isset {
  _CalcController_Sum_args__isset() : a(false), b(false) {}
  bool a :1;
  bool b :1;
} _CalcController_Sum_args__isset;

class CalcController_Sum_args {
 public:

  CalcController_Sum_args(const CalcController_Sum_args&);
  CalcController_Sum_args& operator=(const CalcController_Sum_args&);
  CalcController_Sum_args() : a(0), b(0) {
  }

  virtual ~CalcController_Sum_args() throw();
  int32_t a;
  int32_t b;

  _CalcController_Sum_args__isset __isset;

  void __set_a(const int32_t val);

  void __set_b(const int32_t val);

  bool operator == (const CalcController_Sum_args & rhs) const
  {
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    return true;
  }
  bool operator != (const CalcController_Sum_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalcController_Sum_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CalcController_Sum_pargs {
 public:


  virtual ~CalcController_Sum_pargs() throw();
  const int32_t* a;
  const int32_t* b;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CalcController_Sum_result__isset {
  _CalcController_Sum_result__isset() : success(false) {}
  bool success :1;
} _CalcController_Sum_result__isset;

class CalcController_Sum_result {
 public:

  CalcController_Sum_result(const CalcController_Sum_result&);
  CalcController_Sum_result& operator=(const CalcController_Sum_result&);
  CalcController_Sum_result() : success(0) {
  }

  virtual ~CalcController_Sum_result() throw();
  int32_t success;

  _CalcController_Sum_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CalcController_Sum_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CalcController_Sum_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CalcController_Sum_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CalcController_Sum_presult__isset {
  _CalcController_Sum_presult__isset() : success(false) {}
  bool success :1;
} _CalcController_Sum_presult__isset;

class CalcController_Sum_presult {
 public:


  virtual ~CalcController_Sum_presult() throw();
  int32_t* success;

  _CalcController_Sum_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalcControllerClient : virtual public CalcControllerIf {
 public:
  CalcControllerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalcControllerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Sum(const int32_t a, const int32_t b);
  void send_Sum(const int32_t a, const int32_t b);
  int32_t recv_Sum();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalcControllerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CalcControllerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalcControllerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Sum(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalcControllerProcessor(boost::shared_ptr<CalcControllerIf> iface) :
    iface_(iface) {
    processMap_["Sum"] = &CalcControllerProcessor::process_Sum;
  }

  virtual ~CalcControllerProcessor() {}
};

class CalcControllerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalcControllerProcessorFactory(const ::boost::shared_ptr< CalcControllerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CalcControllerIfFactory > handlerFactory_;
};

class CalcControllerMultiface : virtual public CalcControllerIf {
 public:
  CalcControllerMultiface(std::vector<boost::shared_ptr<CalcControllerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalcControllerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CalcControllerIf> > ifaces_;
  CalcControllerMultiface() {}
  void add(boost::shared_ptr<CalcControllerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Sum(const int32_t a, const int32_t b) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Sum(a, b);
    }
    return ifaces_[i]->Sum(a, b);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalcControllerConcurrentClient : virtual public CalcControllerIf {
 public:
  CalcControllerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalcControllerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Sum(const int32_t a, const int32_t b);
  int32_t send_Sum(const int32_t a, const int32_t b);
  int32_t recv_Sum(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif // CalcController_H
