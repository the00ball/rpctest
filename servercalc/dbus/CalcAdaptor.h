
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx_____gen_CalcAdaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx_____gen_CalcAdaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++-1/dbus-c++/interface.h>
#include <dbus-c++-1/dbus-c++/introspection.h>
#include <dbus-c++-1/dbus-c++/message.h>
#include <cstdint>

namespace rpctest {
namespace dbus {

class Calc_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Calc_adaptor()
    : ::DBus::InterfaceAdaptor("rpctest.dbus.Calc")
    {
        register_method(Calc_adaptor, Sum, _Sum_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Sum_args[] = 
        {
            { "a", "i", true },
            { "b", "i", true },
            { "value", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Calc_adaptor_methods[] = 
        {
            { "Sum", Sum_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Calc_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Calc_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Calc_adaptor_interface = 
        {
            "rpctest.dbus.Calc",
            Calc_adaptor_methods,
            Calc_adaptor_signals,
            Calc_adaptor_properties
        };
        return &Calc_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int32_t Sum(const int32_t& a, const int32_t& b) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Sum_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argin1; ri >> argin1;
        int32_t argin2; ri >> argin2;
        int32_t argout1 = Sum(argin1, argin2);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } 
#endif //__dbusxx_____gen_CalcAdaptor_h__ADAPTOR_MARSHAL_H
